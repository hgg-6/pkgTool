// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -package=logxmocks -destination=mocks/logx.mock.go Loggerx
//

// Package logxmocks is a generated GoMock package.
package logxmocks

import (
	reflect "reflect"

	logx "gitee.com/hgg_test/pkg_tool/v2/logx"
	gomock "go.uber.org/mock/gomock"
)

// MockLoggerx is a mock of Loggerx interface.
type MockLoggerx struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerxMockRecorder
	isgomock struct{}
}

// MockLoggerxMockRecorder is the mock recorder for MockLoggerx.
type MockLoggerxMockRecorder struct {
	mock *MockLoggerx
}

// NewMockLoggerx creates a new mock instance.
func NewMockLoggerx(ctrl *gomock.Controller) *MockLoggerx {
	mock := &MockLoggerx{ctrl: ctrl}
	mock.recorder = &MockLoggerxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerx) EXPECT() *MockLoggerxMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerx) Debug(msg string, fields ...logx.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerxMockRecorder) Debug(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerx)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggerx) Error(msg string, fields ...logx.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerxMockRecorder) Error(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerx)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLoggerx) Info(msg string, fields ...logx.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerxMockRecorder) Info(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerx)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLoggerx) Warn(msg string, fields ...logx.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerxMockRecorder) Warn(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerx)(nil).Warn), varargs...)
}
