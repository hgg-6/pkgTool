// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -package=zerologxmocks -destination=mocks/zerologx.mock.go Zlogger
//

// Package zerologxmocks is a generated GoMock package.
package zerologxmocks

import (
	reflect "reflect"

	zerolog "github.com/rs/zerolog"
	gomock "go.uber.org/mock/gomock"
)

// MockZlogger is a mock of Zlogger interface.
type MockZlogger struct {
	ctrl     *gomock.Controller
	recorder *MockZloggerMockRecorder
	isgomock struct{}
}

// MockZloggerMockRecorder is the mock recorder for MockZlogger.
type MockZloggerMockRecorder struct {
	mock *MockZlogger
}

// NewMockZlogger creates a new mock instance.
func NewMockZlogger(ctrl *gomock.Controller) *MockZlogger {
	mock := &MockZlogger{ctrl: ctrl}
	mock.recorder = &MockZloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZlogger) EXPECT() *MockZloggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockZlogger) Debug() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockZloggerMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockZlogger)(nil).Debug))
}

// Error mocks base method.
func (m *MockZlogger) Error() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockZloggerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockZlogger)(nil).Error))
}

// Info mocks base method.
func (m *MockZlogger) Info() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockZloggerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockZlogger)(nil).Info))
}

// Warn mocks base method.
func (m *MockZlogger) Warn() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockZloggerMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockZlogger)(nil).Warn))
}

// With mocks base method.
func (m *MockZlogger) With() zerolog.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With")
	ret0, _ := ret[0].(zerolog.Context)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockZloggerMockRecorder) With() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockZlogger)(nil).With))
}
