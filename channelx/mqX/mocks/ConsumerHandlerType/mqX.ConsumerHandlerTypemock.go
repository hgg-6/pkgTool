// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -package=ConsumerHandlerTypemocks -destination=mocks/ConsumerHandlerType/mqX.ConsumerHandlerTypemock.go mqX
//

// Package ConsumerHandlerTypemocks is a generated GoMock package.
package ConsumerHandlerTypemocks

import (
	context "context"
	reflect "reflect"

	mqX "gitee.com/hgg_test/pkg_tool/v2/channelx/mqX"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Send mocks base method.
func (m *MockProducer) Send(ctx context.Context, msg *mqX.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerMockRecorder) Send(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), ctx, msg)
}

// SendBatch mocks base method.
func (m *MockProducer) SendBatch(ctx context.Context, msgs []*mqX.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, msgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockProducerMockRecorder) SendBatch(ctx, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockProducer)(nil).SendBatch), ctx, msgs)
}

// MockConsumerHandlerType is a mock of ConsumerHandlerType interface.
type MockConsumerHandlerType struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerHandlerTypeMockRecorder
	isgomock struct{}
}

// MockConsumerHandlerTypeMockRecorder is the mock recorder for MockConsumerHandlerType.
type MockConsumerHandlerTypeMockRecorder struct {
	mock *MockConsumerHandlerType
}

// NewMockConsumerHandlerType creates a new mock instance.
func NewMockConsumerHandlerType(ctrl *gomock.Controller) *MockConsumerHandlerType {
	mock := &MockConsumerHandlerType{ctrl: ctrl}
	mock.recorder = &MockConsumerHandlerTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerHandlerType) EXPECT() *MockConsumerHandlerTypeMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockConsumerHandlerType) Handle(ctx context.Context, msg *mqX.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockConsumerHandlerTypeMockRecorder) Handle(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockConsumerHandlerType)(nil).Handle), ctx, msg)
}

// HandleBatch mocks base method.
func (m *MockConsumerHandlerType) HandleBatch(ctx context.Context, msgs []*mqX.Message) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBatch", ctx, msgs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleBatch indicates an expected call of HandleBatch.
func (mr *MockConsumerHandlerTypeMockRecorder) HandleBatch(ctx, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBatch", reflect.TypeOf((*MockConsumerHandlerType)(nil).HandleBatch), ctx, msgs)
}

// IsBatch mocks base method.
func (m *MockConsumerHandlerType) IsBatch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBatch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBatch indicates an expected call of IsBatch.
func (mr *MockConsumerHandlerTypeMockRecorder) IsBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBatch", reflect.TypeOf((*MockConsumerHandlerType)(nil).IsBatch))
}

// MockConsumerHandler is a mock of ConsumerHandler interface.
type MockConsumerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerHandlerMockRecorder
	isgomock struct{}
}

// MockConsumerHandlerMockRecorder is the mock recorder for MockConsumerHandler.
type MockConsumerHandlerMockRecorder struct {
	mock *MockConsumerHandler
}

// NewMockConsumerHandler creates a new mock instance.
func NewMockConsumerHandler(ctrl *gomock.Controller) *MockConsumerHandler {
	mock := &MockConsumerHandler{ctrl: ctrl}
	mock.recorder = &MockConsumerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerHandler) EXPECT() *MockConsumerHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockConsumerHandler) Handle(ctx context.Context, msg *mqX.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockConsumerHandlerMockRecorder) Handle(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockConsumerHandler)(nil).Handle), ctx, msg)
}

// MockBatchConsumerHandler is a mock of BatchConsumerHandler interface.
type MockBatchConsumerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBatchConsumerHandlerMockRecorder
	isgomock struct{}
}

// MockBatchConsumerHandlerMockRecorder is the mock recorder for MockBatchConsumerHandler.
type MockBatchConsumerHandlerMockRecorder struct {
	mock *MockBatchConsumerHandler
}

// NewMockBatchConsumerHandler creates a new mock instance.
func NewMockBatchConsumerHandler(ctrl *gomock.Controller) *MockBatchConsumerHandler {
	mock := &MockBatchConsumerHandler{ctrl: ctrl}
	mock.recorder = &MockBatchConsumerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchConsumerHandler) EXPECT() *MockBatchConsumerHandlerMockRecorder {
	return m.recorder
}

// HandleBatch mocks base method.
func (m *MockBatchConsumerHandler) HandleBatch(ctx context.Context, msgs []*mqX.Message) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBatch", ctx, msgs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleBatch indicates an expected call of HandleBatch.
func (mr *MockBatchConsumerHandlerMockRecorder) HandleBatch(ctx, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBatch", reflect.TypeOf((*MockBatchConsumerHandler)(nil).HandleBatch), ctx, msgs)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockConsumer) Subscribe(ctx context.Context, topics []string, handler mqX.ConsumerHandlerType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topics, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockConsumerMockRecorder) Subscribe(ctx, topics, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockConsumer)(nil).Subscribe), ctx, topics, handler)
}
