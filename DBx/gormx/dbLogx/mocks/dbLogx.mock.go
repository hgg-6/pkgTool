// Code generated by MockGen. DO NOT EDIT.
// Source: ./zeroLogTypes.go
//
// Generated by this command:
//
//	mockgen -source=./zeroLogTypes.go -package=dbLogxmocks -destination=mocks/dbLogx.mock.go GormLogIn
//

// Package dbLogxmocks is a generated GoMock package.
package dbLogxmocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	logger "gorm.io/gorm/logger"
)

// MockGormLogIn is a mock of GormLogIn interface.
type MockGormLogIn struct {
	ctrl     *gomock.Controller
	recorder *MockGormLogInMockRecorder
	isgomock struct{}
}

// MockGormLogInMockRecorder is the mock recorder for MockGormLogIn.
type MockGormLogInMockRecorder struct {
	mock *MockGormLogIn
}

// NewMockGormLogIn creates a new mock instance.
func NewMockGormLogIn(ctrl *gomock.Controller) *MockGormLogIn {
	mock := &MockGormLogIn{ctrl: ctrl}
	mock.recorder = &MockGormLogInMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGormLogIn) EXPECT() *MockGormLogInMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockGormLogIn) Error(ctx context.Context, msg string, data ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockGormLogInMockRecorder) Error(ctx, msg any, data ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockGormLogIn)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockGormLogIn) Info(ctx context.Context, msg string, data ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockGormLogInMockRecorder) Info(ctx, msg any, data ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockGormLogIn)(nil).Info), varargs...)
}

// LogMode mocks base method.
func (m *MockGormLogIn) LogMode(level logger.LogLevel) logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMode", level)
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// LogMode indicates an expected call of LogMode.
func (mr *MockGormLogInMockRecorder) LogMode(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMode", reflect.TypeOf((*MockGormLogIn)(nil).LogMode), level)
}

// Trace mocks base method.
func (m *MockGormLogIn) Trace(ctx context.Context, begin time.Time, fc func() (string, int64), err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Trace", ctx, begin, fc, err)
}

// Trace indicates an expected call of Trace.
func (mr *MockGormLogInMockRecorder) Trace(ctx, begin, fc, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockGormLogIn)(nil).Trace), ctx, begin, fc, err)
}

// Warn mocks base method.
func (m *MockGormLogIn) Warn(ctx context.Context, msg string, data ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockGormLogInMockRecorder) Warn(ctx, msg any, data ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockGormLogIn)(nil).Warn), varargs...)
}
