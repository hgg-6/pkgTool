// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -package=jwtmocks -destination=mocks/jwtHdl.mock.go JwtHandlerx
//

// Package jwtmocks is a generated GoMock package.
package jwtmocks

import (
	reflect "reflect"

	jwtx "gitee.com/hgg_test/pkg_tool/v2/webx/ginx/middleware/jwtx"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockJwtHandlerx is a mock of JwtHandlerx interface.
type MockJwtHandlerx struct {
	ctrl     *gomock.Controller
	recorder *MockJwtHandlerxMockRecorder
	isgomock struct{}
}

// MockJwtHandlerxMockRecorder is the mock recorder for MockJwtHandlerx.
type MockJwtHandlerxMockRecorder struct {
	mock *MockJwtHandlerx
}

// NewMockJwtHandlerx creates a new mock instance.
func NewMockJwtHandlerx(ctrl *gomock.Controller) *MockJwtHandlerx {
	mock := &MockJwtHandlerx{ctrl: ctrl}
	mock.recorder = &MockJwtHandlerxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtHandlerx) EXPECT() *MockJwtHandlerxMockRecorder {
	return m.recorder
}

// DeleteToken mocks base method.
func (m *MockJwtHandlerx) DeleteToken(ctx *gin.Context) (*jwtx.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx)
	ret0, _ := ret[0].(*jwtx.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockJwtHandlerxMockRecorder) DeleteToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockJwtHandlerx)(nil).DeleteToken), ctx)
}

// ExtractToken mocks base method.
func (m *MockJwtHandlerx) ExtractToken(ctx *gin.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractToken indicates an expected call of ExtractToken.
func (mr *MockJwtHandlerxMockRecorder) ExtractToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockJwtHandlerx)(nil).ExtractToken), ctx)
}

// LongVerifyToken mocks base method.
func (m *MockJwtHandlerx) LongVerifyToken(ctx *gin.Context) (*jwtx.RefreshUserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LongVerifyToken", ctx)
	ret0, _ := ret[0].(*jwtx.RefreshUserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LongVerifyToken indicates an expected call of LongVerifyToken.
func (mr *MockJwtHandlerxMockRecorder) LongVerifyToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LongVerifyToken", reflect.TypeOf((*MockJwtHandlerx)(nil).LongVerifyToken), ctx)
}

// RefreshToken mocks base method.
func (m *MockJwtHandlerx) RefreshToken(ctx *gin.Context, ssid string) (*jwtx.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, ssid)
	ret0, _ := ret[0].(*jwtx.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockJwtHandlerxMockRecorder) RefreshToken(ctx, ssid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockJwtHandlerx)(nil).RefreshToken), ctx, ssid)
}

// SetToken mocks base method.
func (m *MockJwtHandlerx) SetToken(ctx *gin.Context, userId int64, name, ssid string) (*jwtx.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", ctx, userId, name, ssid)
	ret0, _ := ret[0].(*jwtx.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetToken indicates an expected call of SetToken.
func (mr *MockJwtHandlerxMockRecorder) SetToken(ctx, userId, name, ssid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockJwtHandlerx)(nil).SetToken), ctx, userId, name, ssid)
}

// VerifyToken mocks base method.
func (m *MockJwtHandlerx) VerifyToken(ctx *gin.Context) (*jwtx.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx)
	ret0, _ := ret[0].(*jwtx.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJwtHandlerxMockRecorder) VerifyToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJwtHandlerx)(nil).VerifyToken), ctx)
}
